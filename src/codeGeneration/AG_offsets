P: Program: program -> definitions+
R:  int paramBytesSum = 0;
    for(int i=0;i<definitions+.size(); i--) {
        Definition def = definitions*.get(i);
        def.offset = 4 + definitionsBytesSum;
        paramBytesSum += def.type.numberOfBytes();
    }

P: FuncDefinition: funcDefinition -> type ID statements*
R:  int localVariablesBytesSum = 0;
    for(int i=0;i<statements*.size(); i++) {
        VarDefinition varDefinition = statements*.get(i);
        localVariablesBytesSum += varDefinition.type.numberOfBytes();
        varDefinition.offset = -localVariablesBytesSum;
    }

P: FunctionType: functionType -> retType varDefinition*
R:  int paramBytesSum = 0;
    for(int i=varDefinition*.size()-1; i>=0; i--) {
        VarDefinition varDef = varDefinition*.get(i);
        varDef.offset = 4 + paramBytesSum;
        paramBytesSum += varDef.type.numberOfBytes();
    }

P: VariableDefinition: variableDefinition -> type name
R:  int variablesBytesSum = 0;
    if(variableDefinition.scope == 0)
        variableDefinition.offset = globalVariablesByteSum;
        globalVariablesByteSum += variableDefinition.type.numberOfBytes();
    else
        //local variable

P: StructType : structType -> recordFields*
R:  int recordFieldsBytesSum = 0;
    for(RecordField field : recordFields*)
        field.offset = recordFieldsBytesSum;
        recordFieldsBytesSum += field.type.numberOfBytes();