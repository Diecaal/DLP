[Lab 05]
1. Take the existing AST implementation (lab 02)
2. Take the language recognizer (lab 04)
3. Adding embedded code to your ANTLR grammar, implement the language parser to create the AST
4. Check its correctness by using Introspector
[Lab 06]
Add an ErrorHandler class to manage type errors. As an example, the compiler must show an error message for the input.txt file,
indicating the line and column numbers. The rest of type errors will be handled in the following laboratories.
[Lab 07]
Traverse the AST with the visitor design pattern, annotating the lvalue attribute for expressions.
The compiler must accept input.txt and prompt the appropriate error messages for input1-wrong.txt and input2-wrong.txt.
[Lab 08]
Implement the identification pass of the semantic analysis phase. Complete SymbolTable.java to make SymbolTableTest.java succeed.
Then, implement the identification pass. Check the correct implementation showing input.txt with the introspector.
The 4 error messages in input-wrong.txt must be prompted by the compiler.



